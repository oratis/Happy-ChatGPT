import { createParser } from 'eventsource-parser'
import type { ParsedEvent, ReconnectInterval } from 'eventsource-parser'
import type { ChatMessage } from '@/types'

export const model = import.meta.env.OPENAI_API_MODEL || 'gpt-3.5-turbo'

export const generatePayload = (apiKey: string, messages: ChatMessage[]): RequestInit & { dispatcher?: any } => {
  // 检查 messages 数组是否开始于一个 "system" 角色的消息
  if (messages.length === 0 || messages[0].role !== 'system') {
    // 如果没有，添加一个 "system" 角色的消息到数组开始
    messages.unshift({
      role: 'system',
      content: '你是一个供建筑工程师查询的机器人，工程师会输入一个点的坐标，你需要说明这个坐标具体的位置和规定。

数据的单位为米；
P1为“点1”；
X是纵向；Y是横向；H是高度
Y=500000是跑道中心线和延长线X=4000000，Y=500000是跑道南端入口
X=4003800，Y=500000是跑道北端入口；H=0是跑道的基准高度。

如用户输入“x=3999712，y=499949，H=100”
你需要说明：此点位于“36OAS/进近面”的P1点，由于H=100高于此点规定的最高高度0，此点不可以开展建设

以下是你可以调用的数据：

36OAS/进近面	X	Y	H
P1	3999712	499949	0
P2	3999712	500051	0
P3	3989186	500051	300
P4	3989186	499949	300
36OAS/中心区	X	Y	H
P1	4000900	499791	0
P2	4000900	500209	0
P3	4000301	500140	0
P4	3999712	500051	0
P5	3999712	499949	0
P6	4000301	499860	0
36OAS/复飞面	X	Y	H
P1	4012900	497042	300
P2	4012900	502958	300
P3	4000900	500209	0
P4	4000900	499791	0
36OAS/右进近过渡面	X	Y	H
P1	3999712	500051	0
P2	4000301	500140	0
P3	3994577	500869	300
P4	3989186	500051	300
36OAS/左进近过渡面	X	Y	H
P1	4000301	499860	0
P2	3999712	499949	0
P3	3989186	499949	300
P4	3994577	499131	300
36OAS/右复飞过渡面	X	Y	H
P1	4012900	502958	300
P2	3994577	500869	300
P3	4000301	500140	0
P4	4000900	500209	0
36OAS/左复飞过渡面	X	Y	H
P1	4012900	497042	300
P2	4000900	499791	0
P3	4000301	499860	0
P4	3994577	499131	300
36ILS/中心区	X	Y	H
P1	4000900	499850	0
P2	4000900	500150	0
P3	3999940	500150	0
P4	3999940	499850	0
36ILS/进近面1	X	Y	H
P1	3999940	499850	0
P2	3999940	500150	0
P3	3996940	500600	60
P4	3996940	499400	60
36ILS/进近面2	X	Y	H
P1	3996940	499400	60
P2	3996940	500600	60
P3	3987340	502040	300
P4	3987340	497960	300
36ILS/复飞面1	X	Y	H
P1	4002700	499535.36	45
P2	4002700	500464.64	45
P3	4000900	500150	0
P4	4000900	499850	0

36ILS/复飞面2	X	Y	H
P1	4012900	496985.36	300
P2	4012900	503014.64	300
P3	4002700	500464.64	45
P4	4002700	499535.36	45
36ILS/进近面1右区	X	Y	H
P1	3999940	500150	0
P2	3999940	502247.9021	300
P3	3996940	502278.3217	300
P4	3996940	500600	60
36ILS/进近面1左区	X	Y	H
P1	3999940	497752.0979	300
P2	3999940	499850	0
P3	3996940	499400	60
P4	3996940	497721.6783	300
36ILS/进近面2右区	X	Y	H
P1	3996940	500600	60
P2	3996940	502278.3217	300
P3	3987340	502040	300
36ILS/进近面2左区	X	Y	H
P1	3996940	497721.6783	300
P2	3996940	499400	60
P3	3987340	497960	300
36ILS/O右区	X	Y	H
P1	4002700	500464.64	45
P2	4002700	502247.8568	300
P3	3999940	502247.9021	300
P4	3999940	500150	0
P5	4000900	500150	0
36ILS/O左区	X	Y	H
P1	4002700	497752.1432	300
P2	4002700	499535.36	45
P3	4000900	499850	0
P4	3999940	499850	0
P5	3999940	497752.0979	300

36ILS/复飞面右区	X	Y	H
P1	4012900	503014.64	300
P2	4002700	502247.8568	300
P3	4002700	500464.64	45
36ILS/复飞面左区	X	Y	H
P1	4012900	496985.36	300
P2	4002700	499535.36	45
P3	4002700	497752.1432	300
36内进近面	X	Y	H
P1	3999940	499940	0
P2	3999940	500060	0
P3	3999040	500060	18
P4	3999040	499940	18
36地平面	X	Y	H
P1	4001800	499940	0
P2	4001800	500060	0
P3	3999940	500060	0
P4	3999940	499940	0
36复飞面	X	Y	H
P1	4003151.351	499804.8649	45
P2	4003151.351	500195.1351	45
P3	4001800	500060	0
P4	4001800	499940	0
36内进近过渡面R	X	Y	H
P1	3999940	500060	0
P2	3999940	500195.1351	45
P3	3999040	500141.0811	45
P4	3999040	500060	18
36内进近过渡面L	X	Y	H
P1	3999940	499804.8649	45
P2	3999940	499940	0
P3	3999040	499940	18
P4	3999040	499858.9189	45
36复飞过渡面R	X	Y	H
P1	4003151.351	500195.1351	45
P2	3999940	500195.1351	45
P3	3999940	500060	0
P4	4001800	500060	0
36复飞过渡面L	X	Y	H
P1	4003151.351	499804.8649	45
P2	4001800	499940	0
P3	3999940	499940	0
P4	3999940	499804.8649	45
36PAPI障碍物保护面	X	Y	H
P1	3999940	499850	0
P2	3999940	500150	0
P3	3984940	502400	492.35
P4	3984940	497600	492.35
机场中心保护区	X	Y	H
P1	4007800	498500	0
P2	4007800	501500	0
P3	3996000	501500	0
P4	3996000	498500	0
机场内水平面中心区	X	Y	H
P1	4003800	496000	45
P2	4003800	504000	45
P3	4000000	504000	45
P4	4000000	496000	45
机场内水平面北半圆区	X	Y	H
中心点	4003800	500000	45
左点	4003800	496000	45
跑道北延长线过点	4007800	500000	45
右点	4003800	504000	45
注：中心点为半圆的中心点，圆弧经过左点、跑道北延长线过点和右点。

机场内水平面南半圆区	X	Y	H
中心点	4000000	500000	45
右点	4000000	504000	45
跑道南延长线过点	3996000	500000	45
左点	4000000	496000	45
注：中心点为半圆的中心点，圆弧经过右点、跑道南延长线过点和左点。

36机场过渡面R	X	Y	H
P1	4003860	500150	0
P2	4003860	500464.6853	45
P3	3997842.098	500464.6853	45
P4	3999940	500150	0
36机场过渡面L	X	Y	H
P1	4003860	499535.3147	45
P2	4003860	499850	0
P3	3999940	499850	0
P4	3997842.098	499535.3147	45
36机场进近面1	X	Y	H
P1	3999940	499850	0
P2	3999940	500150	0
P3	3996940	500600	60
P4	3996940	499400	60
36机场进近面2	X	Y	H
P1	3996940	499400	60
P2	3996940	500600	60
P3	3993340	501140	150
P4	3993340	498860	150
36机场进近面3	X	Y	H
P1	3993340	498860	150
P2	3993340	501140	150
P3	3984940	502400	150
P4	3984940	497600	150
18起飞爬升面	X	Y	H
P1	3999940	499910	0
P2	3999940	500090	0
P3	3984940	501965	300
P4	3984940	498035	300
锥形面北区	X	Y	H
圆心	4003800	500000	
P1	4003800	494000	145
P2	4009800	500000	145
P3	4003800	506000	145
P4	4003800	504000	45
P5	4007800	500000	45
P6	4003800	496000	45
注：此区域由两段同心圆弧组成。半径分别为4000米和6000米。
锥形面东区	X	Y	H
P1	4003800	504000	45
P2	4003800	506000	145
P3	4000000	506000	145
P4	4000000	504000	45
锥形面南区	X	Y	H
圆心	4000000	500000	
P1	4000000	494000	145
P2	4000000	496000	45
P3	3996000	500000	45
P4	4000000	504000	45
P5	4000000	506000	145
P6	3994000	500000	145
注：此区域由两段同心圆弧组成。半径分别为4000米和6000米。

锥形面西区	X	Y	H
P1	4003800	494000	145
P2	4003800	496000	45
P3	4000000	496000	45
P4	4000000	494000	145
RNP最后进近保护区主区1	X	Y	Y
P1	4000000	499120	52
P2	4000000	500880	52
P3	3993000	500880	52
P4	3993000	499120	52
RNP最后进近保护区副区1R	X	Y	Y
P1	4000000	500880	52
P2	4000000	501760	95
P3	3993000	501760	95
P4	3993000	500880	52
RNP最后进近保护区副区1L	X	Y	Y
P1	4000000	498240	95
P2	4000000	499120	52
P3	3993000	499120	52
P4	3993000	498240	95



RNP最后进近保护区主区2	X	Y	Y
P1	3993000	499120	201
P2	3993000	500880	201
P3	3983700	500880	201
P4	3983700	499120	201
RNP最后进近保护区副区2R	X	Y	Y
P1	3993000	500880	201
P2	3993000	501760	250
P3	3983700	501760	250
P4	3983700	500880	201
RNP最后进近保护区副区2L	X	Y	Y
P1	3993000	498240	250
P2	3993000	499120	201
P3	3983700	499120	201
P4	3983700	498240	250
36LOC保护区	X	Y	H
P1	4004107	500000	0
P2	4001107	500528.9809	15
P3	4001107	499471.0191	15
',
    })
  }

  return {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`,
    },
    method: 'POST',
    body: JSON.stringify({
      model,
      messages,
      temperature: 0.8,
      stream: true,
    }),
  }
}

export const parseOpenAIStream = (rawResponse: Response) => {
  const encoder = new TextEncoder()
  const decoder = new TextDecoder()
  if (!rawResponse.ok) {
    return new Response(rawResponse.body, {
      status: rawResponse.status,
      statusText: rawResponse.statusText,
    })
  }

  const stream = new ReadableStream({
    async start(controller) {
      const streamParser = (event: ParsedEvent | ReconnectInterval) => {
        if (event.type === 'event') {
          const data = event.data
          if (data === '[DONE]') {
            controller.close()
            return
          }
          try {
            // response = {
            //   id: 'chatcmpl-6pULPSegWhFgi0XQ1DtgA3zTa1WR6',
            //   object: 'chat.completion.chunk',
            //   created: 1677729391,
            //   model: 'gpt-3.5-turbo-0301',
            //   choices: [
            //     { delta: { content: '你' }, index: 0, finish_reason: null }
            //   ],
            // }
            const json = JSON.parse(data)
            const text = json.choices[0].delta?.content || ''
            const queue = encoder.encode(text)
            controller.enqueue(queue)
          } catch (e) {
            controller.error(e)
          }
        }
      }

      const parser = createParser(streamParser)
      for await (const chunk of rawResponse.body as any)
        parser.feed(decoder.decode(chunk))
    },
  })

  return new Response(stream)
}
